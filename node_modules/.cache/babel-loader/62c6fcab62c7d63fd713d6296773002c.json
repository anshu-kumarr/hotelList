{"ast":null,"code":"const initialState = {\n  hotelList: [],\n  renderList: [],\n  countOfHotel: 0,\n  displayIndex: 0\n};\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'INITIALIZE':\n      return { ...state,\n        hotelList: action.payload,\n        countOfHotel: 12\n      };\n\n    case 'ADD_TO_DISPLAY':\n      let maxIndex = state.countOfHotel - 1;\n      let newList = [];\n\n      for (let i = state.displayIndex; i < Math.min(state.displayIndex + 6, maxIndex); i++) {\n        newList.push(state.hotelList[i]);\n      }\n\n      return { ...state,\n        renderList: [...state.renderList, ...newList],\n        displayIndex: state.displayIndex + 6\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/admin/Desktop/hotelProject.ts/hotel_project/src/redux/reducer.tsx"],"names":["initialState","hotelList","renderList","countOfHotel","displayIndex","reducer","state","action","type","payload","maxIndex","newList","i","Math","min","push"],"mappings":"AAWA,MAAMA,YAAoB,GAAG;AAC3BC,EAAAA,SAAS,EAAE,EADgB;AAE3BC,EAAAA,UAAU,EAAE,EAFe;AAG3BC,EAAAA,YAAY,EAAE,CAHa;AAI3BC,EAAAA,YAAY,EAAG;AAJY,CAA7B;AAMA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGN,YAAzB,EAAsCO,MAAtC,EAAuD;AACpE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELL,QAAAA,SAAS,EAAEM,MAAM,CAACE,OAFb;AAGLN,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAKF,SAAK,gBAAL;AACE,UAAIO,QAAQ,GAAGJ,KAAK,CAACH,YAAN,GAAqB,CAApC;AACA,UAAIQ,OAAqB,GAAG,EAA5B;;AACA,WAAK,IAAIC,CAAC,GAAGN,KAAK,CAACF,YAAnB,EAAiCQ,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASR,KAAK,CAACF,YAAN,GAAqB,CAA9B,EAAiCM,QAAjC,CAArC,EAAiFE,CAAC,EAAlF,EAAqF;AACnFD,QAAAA,OAAO,CAACI,IAAR,CAAaT,KAAK,CAACL,SAAN,CAAgBW,CAAhB,CAAb;AACD;;AACD,aAAO,EACL,GAAGN,KADE;AAELJ,QAAAA,UAAU,EAAE,CAAC,GAAGI,KAAK,CAACJ,UAAV,EAAsB,GAAGS,OAAzB,CAFP;AAGLP,QAAAA,YAAY,EAAEE,KAAK,CAACF,YAAN,GAAqB;AAH9B,OAAP;;AAKF;AACA,aAAOE,KAAP;AAnBF;AAsBD","sourcesContent":["\ninterface action{\n  type: String,\n  payload:any\n}\ninterface initial {\n  hotelList: Array<object>,\n  renderList: Array<object>,\n  countOfHotel: number,\n  displayIndex: number\n}\nconst initialState:initial = {\n  hotelList: [],\n  renderList: [],\n  countOfHotel: 0,\n  displayIndex : 0\n}\nexport default function reducer(state = initialState,action : action) {\n  switch (action.type) {\n    case 'INITIALIZE':\n      return {\n        ...state,\n        hotelList: action.payload,\n        countOfHotel: 12\n      }\n    case 'ADD_TO_DISPLAY':\n      let maxIndex = state.countOfHotel - 1;\n      let newList:Array<object> = []\n      for (let i = state.displayIndex; i < Math.min(state.displayIndex + 6, maxIndex); i++){\n        newList.push(state.hotelList[i])\n      }\n      return {\n        ...state,\n        renderList: [...state.renderList, ...newList],\n        displayIndex: state.displayIndex + 6\n      }\n    default :\n    return state\n      \n  }\n}"]},"metadata":{},"sourceType":"module"}