{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/hotelProject.ts/hotel_project/src/components/Maps.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { GoogleMap, InfoWindow, LoadScript, Marker } from '@react-google-maps/api';\nimport { data } from '../MarkerData';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStyles = {\n  height: \"100%\",\n  width: \"100%\"\n};\nconst defaultCenter = {\n  lat: -37.788450,\n  lng: 144.962680\n};\n\nfunction Maps(props) {\n  _s();\n\n  const state = useSelector(state => state.showMap);\n  const [selected, setSelected] = useState({});\n\n  function handleSelect(item) {\n    setSelected(item);\n  }\n\n  console.log(selected);\n  return /*#__PURE__*/_jsxDEV(MapDisplay, {\n    toggle: state,\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapStyles,\n        zoom: 4,\n        center: defaultCenter,\n        options: {\n          gestureHandling: \"greedy\"\n        },\n        children: [data.hotels.map(item => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            title: item.name,\n            position: {\n              lat: +item.lat,\n              lng: +item.lng\n            },\n            onClick: () => handleSelect(item)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this);\n        }), selected.lat && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: {\n            lat: +selected.lat,\n            lng: +selected.lng\n          },\n          onCloseClick: () => setSelected({}),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selected.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Maps, \"xwHpaebMvMBztfbEuPEI25HSav4=\", false, function () {\n  return [useSelector];\n});\n\n_c = Maps;\nexport default Maps;\nconst MapDisplay = styled.div`\nwidth:${props => props.toggle ? '50%' : '0'}`;\n_c2 = MapDisplay;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Maps\");\n$RefreshReg$(_c2, \"MapDisplay\");","map":{"version":3,"sources":["/Users/admin/Desktop/hotelProject.ts/hotel_project/src/components/Maps.tsx"],"names":["React","useState","GoogleMap","InfoWindow","LoadScript","Marker","data","styled","useSelector","mapStyles","height","width","defaultCenter","lat","lng","Maps","props","state","showMap","selected","setSelected","handleSelect","item","console","log","gestureHandling","hotels","map","name","id","MapDisplay","div","toggle"],"mappings":";;;AAAA,OAAOA,KAAP,IAA8BC,QAA9B,QAA8C,OAA9C;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,UAAhC,EAA2CC,MAA3C,QAAwD,wBAAxD;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAyBC,WAAzB,QAA4C,aAA5C;;AAIA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,MAAM,EAAE,MADQ;AAEhBC,EAAAA,KAAK,EAAE;AAFS,CAAlB;AAIA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,CAAC,SADc;AACHC,EAAAA,GAAG,EAAE;AADF,CAAtB;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAA0C;AAAA;;AAExC,QAAMC,KAAK,GAAGT,WAAW,CAAES,KAAD,IAA2BA,KAAK,CAACC,OAAlC,CAAzB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAM,EAAN,CAAxC;;AACA,WAASoB,YAAT,CAAsBC,IAAtB,EAAkC;AAChCF,IAAAA,WAAW,CAACE,IAAD,CAAX;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,sBACE,QAAC,UAAD;AAAY,IAAA,MAAM,EAAEF,KAApB;AAAA,2BACG,QAAC,UAAD;AACA,MAAA,gBAAgB,EAAC,EADjB;AAAA,6BAEC,QAAC,SAAD;AACE,QAAA,iBAAiB,EAAER,SADrB;AAEE,QAAA,IAAI,EAAE,CAFR;AAGE,QAAA,MAAM,EAAEG,aAHV;AAIE,QAAA,OAAO,EAAE;AAAEa,UAAAA,eAAe,EAAE;AAAnB,SAJX;AAAA,mBAMGnB,IAAI,CAACoB,MAAL,CAAYC,GAAZ,CAAiBL,IAAD,IAAU;AACzB,8BACE,QAAE,MAAF;AAAuB,YAAA,KAAK,EAAEA,IAAI,CAACM,IAAnC;AAAyC,YAAA,QAAQ,EAAE;AAAEf,cAAAA,GAAG,EAAE,CAACS,IAAI,CAACT,GAAb;AAAkBC,cAAAA,GAAG,EAAE,CAACQ,IAAI,CAACR;AAA7B,aAAnD;AAAuF,YAAA,OAAO,EAAE,MAAKO,YAAY,CAACC,IAAD;AAAjH,aAAcA,IAAI,CAACO,EAAnB;AAAA;AAAA;AAAA;AAAA,kBADF;AAGD,SAJA,CANH,EAYIV,QAAQ,CAACN,GAAT,iBAEE,QAAC,UAAD;AACE,UAAA,QAAQ,EAAE;AAAEA,YAAAA,GAAG,EAAE,CAACM,QAAQ,CAACN,GAAjB;AAAsBC,YAAAA,GAAG,EAAE,CAACK,QAAQ,CAACL;AAArC,WADZ;AAEE,UAAA,YAAY,EAAE,MAAMM,WAAW,CAAC,EAAD,CAFjC;AAAA,iCAIA;AAAA,sBAAID,QAAQ,CAACS;AAAb;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA,gBAdN;AAAA;AAAA;AAAA;AAAA;AAAA;AAFD;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;;GAvCQb,I;UAEOP,W;;;KAFPO,I;AAyCT,eAAeA,IAAf;AAEA,MAAMe,UAAU,GAAGvB,MAAM,CAACwB,GAA0B;AACpD,QAAUf,KAAD,IAAWA,KAAK,CAACgB,MAAN,GAAe,KAAf,GAAsB,GAAM,EADhD;MAAMF,U","sourcesContent":["import React, { ReactElement, useState } from 'react'\nimport { GoogleMap, InfoWindow, LoadScript,Marker} from '@react-google-maps/api';\nimport { data } from '../MarkerData'\nimport styled from 'styled-components';\nimport { RootStateOrAny, useSelector } from 'react-redux';\ninterface Props {\n  \n}\nconst mapStyles = {        \n  height: \"100%\",\n  width: \"100%\"};\n\nconst defaultCenter = {\n  lat: -37.788450, lng: 144.962680\n}\nfunction Maps(props: Props): ReactElement {\n\n  const state = useSelector((state: RootStateOrAny) => state.showMap)\n  const [selected, setSelected] = useState<any>({})\n  function handleSelect(item : any) {\n    setSelected(item);\n  }\n  console.log(selected)\n  return (\n    <MapDisplay toggle={state} >\n       <LoadScript\n       googleMapsApiKey=''>\n        <GoogleMap\n          mapContainerStyle={mapStyles}\n          zoom={4}\n          center={defaultCenter}\n          options={{ gestureHandling: \"greedy\" }}\n        >\n          {data.hotels.map((item) => {\n            return (\n              < Marker key={item.id} title={item.name} position={{ lat: +item.lat, lng: +item.lng }} onClick={()=> handleSelect(item)}/>\n            )\n          })}\n          {\n            selected.lat && \n            (\n              <InfoWindow\n                position={{ lat: +selected.lat, lng: +selected.lng }}\n                onCloseClick={() => setSelected({})}\n            >\n              <p>{selected.name}</p>\n            </InfoWindow>\n            )\n         }\n        </GoogleMap>\n     </LoadScript>\n    </MapDisplay>\n   \n  )\n}\n\nexport default Maps\n\nconst MapDisplay = styled.div<{ toggle: Boolean }> `\nwidth:${((props) => props.toggle ? '50%' :'0' )}`"]},"metadata":{},"sourceType":"module"}